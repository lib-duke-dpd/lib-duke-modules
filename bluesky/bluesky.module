<?php

/**
 * Implements hook_help
 *
 */
function bluesky_help($path, $arg) {
	switch ($path) {
		# notice the routing path.  This is common through Drupal modules
		case 'admin/help#bluesky':
			# funtion t() translates the supplied string based on the current language.
			# this function is as core Drupal function and is used EVERYWHERE.
			return '<p>' . t('Displays our Blue Sky view of the world.') . '</p>';
			break;
	}
}

/**
 * Implements hook_menu
 *
 * NOTE: This function supplies routing information for this 
 * module to the Drupal engine.
 *
 * @see: http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7
 *
 * Here, we will provide a simple route (path) that maps to an even simpler callback function.
 * "Callback functions" are part of the essence of Drupal programming.
 */
function bluesky_menu() {
	# Another common practice among Drupal developers is the HEAVY use of arrays.
	$routes = array();
	
	// This route is represented by the following URL
	// http://yourdrupalsite/bluesky/helloworld
	$routes['bluesky/helloworld'] = array(
		// 'page callback' is the function that will be invoked when the above URL is given
		'page callback' => 'bluesky_helloworld',
		
		// 'file' -- the "best practice" is to separate all "page (routing)" specific 
		// functions in a file named <modulename>.pages.inc.
		// However, for this basic example, the above callback function will reside in this .module file
		# 'file' => 'bluesky.pages.inc',
		
		// this option can either simply return TRUE/FALSE, or be a function
		// that returns TRUE/FALSE
		'access callback' => TRUE,
	);
	
	// Now that we've specified all of our interested routes, return it to the 
	// Drupal engine
	return $routes;
}

/**
 * Implementation for hook_preprocess()
 */
function bluesky_preprocess(&$vars, $hook) {
	//watchdog('bluesky_preprocess', $hook);
	if ($hook == 'page') {
		if (isset($vars['node'])) {
			//kpr($vars['node']);
		} else {
			//kpr($vars);
		}
	}
}

/**
 * This is the page callback that is invoked when
 * you (or an end user) types the following URL:
 * http://yourdrupalsite/bluesky/helloworld
 */
function bluesky_helloworld() {
	// simply return a "hello world" string..
	
	// Remember, I warned you that the t() function will be used EVERYWHERE :)
	return '<p>' . t('Hello world') . '</p>';
}

/**
 * Implements hook_block_info()
 *
 * This is the hook that allows a developer to define any and all 
 * blocks that a site admin can choose from using the /admin/structure/blocks option.
 *
 * @returns array of block info items
 */
function bluesky_block_info() {
	return array(
		'bluesky_1' => array(
			'info' => 'Simple Bluesky Block with Textbox entry form.',
			'cache' => DRUPAL_CACHE_PER_PAGE,
		),
		'bluesky_2' => array(
			'info' => 'Very simple Bluesky block.',
			'cache' => DRUPAL_CACHE_PER_ROLE,
		),
	);

	// NOTE -- one can also dynamically create blocks if need be:
	// pseudo code logic
	// -----------------
	// query data rows based on pre-defined criteria
	// for each row:
	//   create block using data from row, making sure each 'delta' is unique
	//	
}

/**
 * Implements hook_block_configure
 */
function bluesky_block_configure($delta='') {
	// Web Developer Notes:
	// ----------------------------
	// One approach to creating blocks that DPD can have 
	// some CSS control over is by identifying all the different 
	// blocks (
	if ($delta == 'bluesky_1') {
		return array(
			'mytext' => array(
				// 'text_format' type allows us to leverage the "CKEditor" plugin
				// (the fancy text editor)
				'#type' => 'text_format',
				'#title' => t('My Text Box'),
			)
		);
	}
	return array();
}

function bluesky_form_alter(&$form, &$form_state, $form_id) {
	//dpm($form_id);
}

/**
 * This is the first attempt to alter the display
 * behavior of the form that displays options 
 * for a block
 */
function bluesky_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
	//kpr($form_state);
	//bluesky_add_css_classes_form_element($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Attempt to add a 'css_classes' field to the form
 * allowing the site administrator, or an individual who 
 * understands HTML/CSS, to add one or more css classes.
 *
 * @param $form
 *   Nested array of form elmeents that comprise the form
 *
 * @param $form_state
 *   A keyed array containing the current state of the form
 *
 * @param $form_id
 *   String representing the name of the form, in this case, 
 *   'block_add_block_form'
 */
function bluesky_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
	//bluesky_add_css_classes_form_element($form);
	/*
	$form['visibility']['css_attributes'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
		'#group' => 'visibility',
		'#title' => 'CSS Attributes',
	);
	$form['visibility']['css_attributes']['css_classes'] = array(
		'#type' => 'textfield',
		'#title' => 'Wrapper CSS class(es) for this block',
		'#description' => 'List of CSS classes assigned to this block.',
	);
	$form['visibility']['css_attributes']['css_element_id'] = array(
		'#type' => 'textfield',
		'#title' => 'Element CSS ID',
		'#description' => 'Unique identifier for this screen element.',
		'#size' => 25,
	);
	*/
}

/**
 * 
 */
function bluesky_add_css_classes_form_element(&$form, &$form_state = NULL) {
	$form['css_attributes'] = array(
		'#type' => 'fieldset',
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
		'#title' => 'CSS Attributes',
	);
	$form['css_attributes']['css_classes'] = array(
		'#type' => 'textfield',
		'#description' => 'List of CSS classes assigned to this block.',
		'#title' => 'Wrapper CSS class name(s)',
	);
	$form['css_attributes']['css_element_id'] = array(
		'#type' => 'textfield',
		'#description' => 'Unique identifier for this screen element.',
		'#size' => '20',
		'#title' => 'Element CSS ID',
	);
	kpr($form);
}

/**
 *
 */
function bluesky_block_save($delta, $edit) {
	//kpr($edit);
}

/**
 * Implements hook_ctools_plugin_type() to inform CTools about the 
 * cloud plugin
 */
//function bluesky_ctools_plugin_type() {
//	$plugins['cloud'] = array(
//		'load themes' => FALSE,
//	);
//	
//	return $plugins;
//}

function bluesky_ctools_plugin_directory($module, $plugin) {
	watchdog('bluesky_ctools_plugin_directory', sprintf('%s|%s', $module, $plugin));
	if ($module == 'page_manager') {
		return "plugins/$plugin";
	}
}
