<?php

/**
 * Implements hook_help
 *
 */
function bluesky_help($path, $arg) {
	switch ($path) {
		# notice the routing path.  This is common through Drupal modules
		case 'admin/help#bluesky':
			# funtion t() translates the supplied string based on the current language.
			# this function is as core Drupal function and is used EVERYWHERE.
			return '<p>' . t('Displays our Blue Sky view of the world.') . '</p>';
			break;
	}
}

/**
 * Implements hook_menu
 *
 * NOTE: This function supplies routing information for this 
 * module to the Drupal engine.
 *
 * @see: http://api.drupal.org/api/drupal/modules!system!system.api.php/function/hook_menu/7
 *
 * Here, we will provide a simple route (path) that maps to an even simpler callback function.
 * "Callback functions" are part of the essence of Drupal programming.
 */
function bluesky_menu() {
	# Another common practice among Drupal developers is the HEAVY use of arrays.
	$routes = array();
	
	#?? This route is represented by the following URL
	// http://yourdrupalsite/bluesky/helloworld
	$routes['bluesky/helloworld'] = array(
		// 'page callback' is the function that will be invoked when the above URL is given
		'page callback' => 'bluesky_helloworld',
		
		// 'file' -- the "best practice" is to separate all "page (routing)" specific 
		// functions in a file named <modulename>.pages.inc.
		// However, for this basic example, the above callback function will reside in this .module file
		# 'file' => 'bluesky.pages.inc',
		
		// this option can either simply return TRUE/FALSE, or be a function
		// that returns TRUE/FALSE
		'access callback' => TRUE,
	);
	
	// Now that we've specified all of our interested routes, return it to the 
	// Drupal engine
	return $routes;
}

/**
 * This is the page callback that is invoked when
 * you (or an end user) types the following URL:
 * http://yourdrupalsite/bluesky/helloworld
 */
function bluesky_helloworld() {
	// simply return a "hello world" string..
	
	// Remember, I warned you that the t() function will be used EVERYWHERE :)
	return '<p>' . t('Hello world') . '</p>';
}

function bluesky_form_alter(&$form, &$form_state, $form_id) {
	dpm($form_id);
}

/**
 * This is the first attempt to alter the display
 * behavior of the form that displays options 
 * for a block
 */
function bluesky_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
	kpr($form_state);
	$form['css_classes'] = array(
		'#title' => 'Wrapper CSS Class Name(s)',
		'#description' => 'List of CSS classes assigned to this block.',
		'#type' => 'textfield',
		'#value' => $form_state['css_classes'],
	);
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Attempt to add a 'css_classes' field to the form
 * allowing the site administrator, or an individual who 
 * understands HTML/CSS, to add one or more css classes.
 *
 * @param $form
 *   Nested array of form elmeents that comprise the form
 *
 * @param $form_state
 *   A keyed array containing the current state of the form
 *
 * @param $form_id
 *   String representing the name of the form, in this case, 
 *   'block_add_block_form'
 */
function bluesky_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
	bluesky_add_css_classes_form_element($form);
}

function bluesky_add_css_classes_form_element(&$form) {
	kpr($form);
	$form['css_classes'] = array(
		'#type' => 'textfield',
		'#description' => 'List of CSS classes assigned to this block.',
		'#title' => 'Wrapper CSS class name(s)',
	);
}